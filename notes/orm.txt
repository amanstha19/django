ORM stands for Object Relational Maping
2. It is a way to query the database without having to write raw SQL quries
3. Some equivalent ORMs of raw sql quries
 => INSERT INTO STUDENT(name, age, email) VALUES("Ram", "20", "r@email.com")
 => Student.objects.create(name="Ram", age=20, email="r@email.com")

 => Select * from Student where id=1
 => Student.objects.filter(id=1)


.... Student.objects.all()
""
CRUD ORMs
let's consider "Student" as a  model

A))) Create:
Student.objects.create(name="", age="", email="", address=")

B)) Read:

1.Student.object.all()
  => Gives all the student object in Queryset
  => Queryset is list like data type.But unlike list, Queryset are immutable
  => Queryset also supports index as in list.But unlike list,negative indexing is not possible
in query


2.Student.objects.filter(id=1)
=> filters also return query set but it gives selected objects only
=> If filter is applied to non- existing data then it returns an empty set


3.Student.objects.get(id=1)
=> It returns a single object
=> if get() is applied to non-existing data  or multi-existing data

C)) Update::
=> update() method is used to update data in a table
=>This update() method can be used only in queryset but not in a single objects
1.Student.objects.all().update(age=30)
2>Student.objects.filter(address="KTM").update(age=30)

 D))) DELETE::
 =>delete method is used to delete a  row  or a multiple row
 => can be used both in Queryset and in an object
 1>Student.objects.filter(address="KTM").delete()
 2>> Student.objects.get(id=1).delete()




